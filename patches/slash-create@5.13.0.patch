diff --git a/package.json b/package.json
index 7b11cce74ca86b97618b3fe6cb7acf994552e275..9526e306b4f819cc1713098adc225d8215fda502 100644
--- a/package.json
+++ b/package.json
@@ -1,5 +1,6 @@
 {
   "name": "slash-create",
+  "sideEffects": false,
   "version": "5.13.0",
   "description": "Create and sync Discord slash commands!",
   "main": "./lib/index.js",
diff --git a/lib/creator.js b/lib/creator.js
index 7818ea53d293b97ce99b7d05951ab9a7d2452470..d226b9866c88feda962d22db27fc7cb9fb48cb96 100644
--- a/lib/creator.js
+++ b/lib/creator.js
@@ -14,7 +14,7 @@ const commandContext_1 = require("./structures/interfaces/commandContext");
 const lodash_isequal_1 = __importDefault(require("lodash.isequal"));
 const componentContext_1 = require("./structures/interfaces/componentContext");
 const autocompleteContext_1 = require("./structures/interfaces/autocompleteContext");
-const path_1 = __importDefault(require("path"));
+// const path_1 = __importDefault(require("path"));
 const modalInteractionContext_1 = require("./structures/interfaces/modalInteractionContext");
 /** The main class for using commands and interactions. */
 class SlashCreator extends eventemitter3_1.default {
@@ -123,20 +123,20 @@ class SlashCreator extends eventemitter3_1.default {
      * const path = require('path');
      * creator.registerCommandsIn(path.join(__dirname, 'commands'));
      */
-    registerCommandsIn(commandPath, customExtensions = []) {
-        const extensions = ['.js', '.cjs', ...customExtensions];
-        const paths = util_1.getFiles(commandPath).filter((file) => extensions.includes(path_1.default.extname(file)));
-        const commands = [];
-        for (const filePath of paths) {
-            try {
-                commands.push(require(filePath));
-            }
-            catch (e) {
-                this.emit('error', new Error(`Failed to load command ${filePath}: ${e}`));
-            }
-        }
-        return this.registerCommands(commands, true);
-    }
+    // registerCommandsIn(commandPath, customExtensions = []) {
+    //     const extensions = ['.js', '.cjs', ...customExtensions];
+    //     const paths = util_1.getFiles(commandPath).filter((file) => extensions.includes(path_1.default.extname(file)));
+    //     const commands = [];
+    //     for (const filePath of paths) {
+    //         try {
+    //             commands.push(require(filePath));
+    //         }
+    //         catch (e) {
+    //             this.emit('error', new Error(`Failed to load command ${filePath}: ${e}`));
+    //         }
+    //     }
+    //     return this.registerCommands(commands, true);
+    // }
     /**
      * Reregisters a command. (does not support changing name, or guild IDs)
      * @param command New command
diff --git a/lib/index.js b/lib/index.js
index 5bd43a6c1c881a99cfb9182c215120b7b09a57b0..0e5485d99f269524a12aa5cfdcef1b4b23f1ac58 100644
--- a/lib/index.js
+++ b/lib/index.js
@@ -36,13 +36,13 @@ __exportStar(require("./util/sequentialBucket"), exports);
 __exportStar(require("./util/multipartData"), exports);
 __exportStar(require("./errors/DiscordHTTPError"), exports);
 __exportStar(require("./errors/DiscordRESTError"), exports);
-__exportStar(require("./servers/lambda"), exports);
-__exportStar(require("./servers/azure"), exports);
-__exportStar(require("./servers/express"), exports);
-__exportStar(require("./servers/fastify"), exports);
-__exportStar(require("./servers/gateway"), exports);
-__exportStar(require("./servers/gcf"), exports);
-__exportStar(require("./servers/vercel"), exports);
+// __exportStar(require("./servers/lambda"), exports);
+// __exportStar(require("./servers/azure"), exports);
+// __exportStar(require("./servers/express"), exports);
+// __exportStar(require("./servers/fastify"), exports);
+// __exportStar(require("./servers/gateway"), exports);
+// __exportStar(require("./servers/gcf"), exports);
+// __exportStar(require("./servers/vercel"), exports);
 __exportStar(require("./structures/member"), exports);
 __exportStar(require("./structures/message"), exports);
 __exportStar(require("./structures/permissions"), exports);
diff --git a/lib/structures/interfaces/messageInteraction.d.ts b/lib/structures/interfaces/messageInteraction.d.ts
index df895c39920f5d594c21534c2400295a71d65532..f2a5878517b33f07a133dc46a02acc4ce70f16b0 100644
--- a/lib/structures/interfaces/messageInteraction.d.ts
+++ b/lib/structures/interfaces/messageInteraction.d.ts
@@ -132,7 +132,7 @@ export interface EditMessageOptions {
 /** A file within {@link EditMessageOptions}. */
 export interface MessageFile {
     /** The attachment to send. */
-    file: Buffer;
+    file: Blob | Uint8Array | File;
     /** The name of the file. */
     name: string;
 }
diff --git a/lib/util/requestHandler.js b/lib/util/requestHandler.js
index b13dac63b084c484c4cfc7c5c9b139908a8c0b03..b9ebcc345e1407abb890be1b1fa68cd2972cfda7 100644
--- a/lib/util/requestHandler.js
+++ b/lib/util/requestHandler.js
@@ -5,9 +5,9 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.RequestHandler = exports.USER_AGENT = void 0;
 const constants_1 = require("../constants");
-const https_1 = __importDefault(require("https"));
+// const https_1 = __importDefault(require("https"));
 const sequentialBucket_1 = require("./sequentialBucket");
-const zlib_1 = __importDefault(require("zlib"));
+// const zlib_1 = __importDefault(require("zlib"));
 const DiscordHTTPError_1 = require("../errors/DiscordHTTPError");
 const DiscordRESTError_1 = require("../errors/DiscordRESTError");
 const multipartData_1 = require("./multipartData");
@@ -61,6 +61,12 @@ class RequestHandler {
         const _stackHolder = { stack: '' }; // Preserve async stack
         Error.captureStackTrace(_stackHolder);
         return new Promise((resolve, reject) => {
+            if (!process) {
+                reject(new Error('Cannot make requests in this environment'));
+                return;
+            }
+            const https_1 = __importDefault(require("https"));
+            const zlib_1 = __importDefault(require("zlib"));
             let attempts = 0;
             const actualCall = (cb) => {
                 const headers = {
diff --git a/lib/util.d.ts b/lib/util.d.ts
index bfa6d1fc7bd7c2ebb431897709ad1b035807e589..c792286305ee5356b189ad1573f888a460b5851d 100644
--- a/lib/util.d.ts
+++ b/lib/util.d.ts
@@ -12,7 +12,7 @@ export declare function verifyKey(body: string, signature: string, timestamp: st
 export declare function formatAllowedMentions(allowed: MessageAllowedMentions | FormattedAllowedMentions, defaultMentions?: FormattedAllowedMentions): FormattedAllowedMentions;
 export declare function oneLine(strings: string | TemplateStringsArray, ..._: any[]): string;
 export declare function validateOptions(options: ApplicationCommandOption[], prefix?: string): void;
-export declare function getFiles(folderPath: string): string[];
+// export declare function getFiles(folderPath: string): string[];
 export declare function generateID(): string;
 /** The allowed mentions for a {@link Message}. */
 export interface MessageAllowedMentions {
diff --git a/lib/util.js b/lib/util.js
index 260a3b61f648095c26aaf7b4eb0c770b2f8c5b37..eeb8f93d11f4ddce2796e87a2d0dabb12dc23a61 100644
--- a/lib/util.js
+++ b/lib/util.js
@@ -1,31 +1,31 @@
 "use strict";
-var __importDefault = (this && this.__importDefault) || function (mod) {
-    return (mod && mod.__esModule) ? mod : { "default": mod };
-};
+// var __importDefault = (this && this.__importDefault) || function (mod) {
+//     return (mod && mod.__esModule) ? mod : { "default": mod };
+// };
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.generateID = exports.getFiles = exports.validateOptions = exports.oneLine = exports.formatAllowedMentions = exports.verifyKey = void 0;
+exports.generateID = exports.validateOptions = exports.oneLine = exports.formatAllowedMentions = void 0;
 const constants_1 = require("./constants");
-const tweetnacl_1 = __importDefault(require("tweetnacl"));
-const fs_1 = __importDefault(require("fs"));
-const path_1 = __importDefault(require("path"));
-/**
- * Validates a payload from Discord against its signature and key.
- *
- * @param rawBody The raw payload data
- * @param signature The signature from the `X-Signature-Ed25519` header
- * @param timestamp The timestamp from the `X-Signature-Timestamp` header
- * @param clientPublicKey The public key from the Discord developer dashboard
- * @returns Whether or not validation was successful
- */
-async function verifyKey(body, signature, timestamp, clientPublicKey) {
-    try {
-        return tweetnacl_1.default.sign.detached.verify(Buffer.from(timestamp + body), Buffer.from(signature, 'hex'), Buffer.from(clientPublicKey, 'hex'));
-    }
-    catch {
-        return false;
-    }
-}
-exports.verifyKey = verifyKey;
+// const tweetnacl_1 = __importDefault(require("tweetnacl"));
+// const fs_1 = __importDefault(require("fs"));
+// const path_1 = __importDefault(require("path"));
+// /**
+//  * Validates a payload from Discord against its signature and key.
+//  *
+//  * @param rawBody The raw payload data
+//  * @param signature The signature from the `X-Signature-Ed25519` header
+//  * @param timestamp The timestamp from the `X-Signature-Timestamp` header
+//  * @param clientPublicKey The public key from the Discord developer dashboard
+//  * @returns Whether or not validation was successful
+//  */
+// async function verifyKey(body, signature, timestamp, clientPublicKey) {
+//     try {
+//         return tweetnacl_1.default.sign.detached.verify(Buffer.from(timestamp + body), Buffer.from(signature, 'hex'), Buffer.from(clientPublicKey, 'hex'));
+//     }
+//     catch {
+//         return false;
+//     }
+// }
+// exports.verifyKey = verifyKey;
 function formatAllowedMentions(allowed, defaultMentions) {
     if (!allowed && defaultMentions)
         return defaultMentions;
@@ -112,20 +112,20 @@ function validateOptions(options, prefix = 'options') {
     }
 }
 exports.validateOptions = validateOptions;
-function getFiles(folderPath) {
-    const fileList = fs_1.default.readdirSync(folderPath);
-    const files = [];
-    for (const file of fileList) {
-        const filePath = path_1.default.join(folderPath, file);
-        const stat = fs_1.default.lstatSync(filePath);
-        if (stat.isDirectory())
-            files.push(...getFiles(filePath));
-        else
-            files.push(filePath);
-    }
-    return files;
-}
-exports.getFiles = getFiles;
+// function getFiles(folderPath) {
+//     const fileList = fs_1.default.readdirSync(folderPath);
+//     const files = [];
+//     for (const file of fileList) {
+//         const filePath = path_1.default.join(folderPath, file);
+//         const stat = fs_1.default.lstatSync(filePath);
+//         if (stat.isDirectory())
+//             files.push(...getFiles(filePath));
+//         else
+//             files.push(filePath);
+//     }
+//     return files;
+// }
+// exports.getFiles = getFiles;
 function generateID() {
     return (Date.now() + Math.round(Math.random() * 1000)).toString(36);
 }